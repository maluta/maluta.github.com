---
layout: post
title: Bitmask
comments: true
---

[this post is a backup recovery from my previous blog]

A short resume on how to use bitmask when you need to store boolean flasg on _integer_ variable. See below two examples, one in C lang and other in Python.

<h2>C language</h2>
<pre lang="c">#define FLAG_TEMPERATURE 1
#define FLAG_ALARM_1    2
#define FLAG_ALARM_2    4
#define FLAG_INTERRUPT 8</pre>
Don't forget to organize in power of 2.
<h3>1) Check value logic (AND)</h3>
<pre lang="c;">if (flags &amp; FLAG_TEMPERATURA) {
/* ... */
}</pre>
<h3>2) Set value TRUE (OR)
</h3>
<pre lang="c">flags |= FLAG_ALARM_1;</pre>
<h3>3) Set value FALSE (AND + NOT)</h3>
<pre lang="c">flags &amp;= ~FLAG_ALARM_2;</pre>
<h2>Python</h2>
<pre lang="python">#!/usr/bin/python

FLAG_TEMPERATURE = 1&lt;&lt;0 # 1
FLAG_ALARM_1 = 1&lt;&lt;1    # 2
FLAG_ALARM_2 = 1&lt;&lt;2    # 4
FLAG_INTERRUPT = 1&lt;&lt;3 # 8

# start by setting the flag
flags = FLAG_TEMPERATE

# check if FLAG_INTERRUPT is true
if flags &amp; FLAG_INTERRUPT:
	print "FLAG_INTERRUPT: TRUE"
else:
	print "FLAG_INTERRUPT: FALSE"

# add another flag
flags |= FLAG_INTERRUPT

# check if FLAG_INTERRUPT is active
if flags &amp; FLAG_INTERRUPT:
	print "FLAG_INTERRUPT: TRUE"
else:
	print "FLAG_INTERRUPT: FALSE"

# check FLAG_TEMPERATURE remains correct
if flags &amp; FLAG_TEMPERATURA:
	print "FLAG_TEMPERATURA: TRUE"
else:
	print "FLAG_TEMPERATURA: FALSE"

# back to initial state (false)
flags &amp;= ~FLAG_INTERRUPT

# new status FLAG_INTERRUPT
if flags &amp; FLAG_INTERRUPT:
	print "FLAG_INTERRUPT: TRUE"
else:
	print "FLAG_INTERRUPT: FALSE"</pre>
